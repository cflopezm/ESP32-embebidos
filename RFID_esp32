#include <SPI.h>
#include <MFRC522.h>
#include <HTTPClient.h>
#include <WiFi.h>

#include <Wire.h>

// Datos de la red wifi

const char* ssid = "MY_ID";
const char* password = "MY_PASSWORD";

// nombre del dominio o direccion IP

const char* serverName = "http://192.168.0.211:1880/rfid_data";

String apiKeyValue = "tPmAT5Ab3j7F9";
//String sensorName = "RFID-RC522";
//String sensorLocation = "bicicleta";

String accion;
String validez;
int id_usuarios = 7;

#define RST_PIN  22 //D4 (RST)
#define SS_PIN  21  //D6 (SDA)

/*
#define SIZE_BUFFER = 18
#define MAX__SIZE_BLOCK = 16
*/
#define redPin 27
#define whitePin 32
//#define buzzerPin 8

MFRC522 mfrc522(SS_PIN,RST_PIN);

byte LecturaUID[4]; //Array para almacenar UID
byte Usuario1[4] = {0x97, 0x57, 0xC1, 0x7B}; // Valor UID de la tarjeta
byte Usuario2[4] = {0xC7, 0xE4, 0x81, 0x19}; // Valor UID de la llave
int cont = 0;

void setup() {
  Serial.begin(115200);
  WiFi.begin(ssid,password);
  Serial.println("Conectando al wifi .....");
  while(WiFi.status() != WL_CONNECTED){
  delay(500);
  Serial.print(".");
  }
  Serial.print("Conectado a la red wifi con direccion IP: ");
  Serial.println(WiFi.localIP());
  
   
  SPI.begin();
  pinMode(redPin, OUTPUT);
  pinMode(whitePin, OUTPUT);
  

  // Init MFRC522

  mfrc522.PCD_Init();
  Serial.println("Sistema activado ..........");
  
}

void loop() {
  
  // Revisando el esatdo de la conexion wifi
  
  if(WiFi.status() == WL_CONNECTED){
  HTTPClient http;
  http.begin(serverName);
  http.addHeader("Content-Type","application/x-www-form-urlencoded");
  

  
  if(! mfrc522.PICC_IsNewCardPresent())
    return;

  if(! mfrc522.PICC_ReadCardSerial())
    return;

    Serial.print("UID: "); //Muestra texto UID
    for (byte i =0; i<4; i++){
      if(mfrc522.uid.uidByte[i]< 0x10){ //Si el byte leido es menor a 0x10
        Serial.print(" 0");              //imprime un espacio en blanco y un cero
      }
      else{                              // Si no es asi
        Serial.print(" ");               // imprime un espacio en blanco
      }
      Serial.print(mfrc522.uid.uidByte[i], HEX); // imprime el byte del UID leido en HEX
      LecturaUID[i] = mfrc522.uid.uidByte[i];    // Almacena en un array el byte leido   
    }
    
      
    

    Serial.print("\t");                   //Esto imprime un tab

    if(comparaUID(LecturaUID,Usuario1)){
      Serial.println("Bienvenido Fabian :D  ........");
      abrirPuerta(); //esto hay que mirarlo para un led...
      cont += 1;
      validez = "Valido";
      
      
    }
    else if(comparaUID(LecturaUID,Usuario2)){
      Serial.println("Bienvenido usuario2 :) ........");
      abrirPuerta();// esto hay que mirarlo para un led...
      cont += 1;
      validez = "Valido";
      
    }
    else{
      Serial.println("No estas regitrado D: ..........");
      Mal_Registro();// Se emite una alarma
      validez = "Invalido";
    }
          
    //preparar tu post data HTTP
    
    if(cont%2 == 0){
    	accion = "Cerrar";
    	
    }
    else{
    	accion = "Abrir";
    }
    	      

  char strUID[32] = "";
  array2string(LecturaUID, 4, strUID);
  
  String httpRequestData = "api_key=" + apiKeyValue + "&id_usuarios=" + id_usuarios + "&UID_utilizado=" + String(strUID) + "&validez=" + String(validez) + "&accion=" + String(accion) + "";
  Serial.print("httpRequestData: ");
  Serial.println(httpRequestData);
  
  // enviar peticion de HTTP POST
  
  int httpResponseCode = http.POST(httpRequestData);
  
  if(httpResponseCode>0){
  
  Serial.print("HTTP Response code: ");
  Serial.println(httpResponseCode);
  }
  else{
  Serial.print("Error code: ");
  Serial.println(httpResponseCode);
  }
  
  http.end();
  }
  
  else{
  Serial.println("Wifi desconectado...");
  }
  
  //enviar post cada 5 segundos
  delay(5000);
  //
  
  
          
          mfrc522.PICC_HaltA(); //Detiene la comunicacion con la tarjeta
          
    
}

// En esta parte van las funciones extra para alarma y leds....

void abrirPuerta(){
  if(cont%2 == 0){
   digitalWrite(whitePin, HIGH);
  delay(50);
  //digitalWrite(buzzerPin, HIGH);
  delay(1500);
  digitalWrite(redPin, HIGH);
  delay(100);
  //digitalWrite(buzzerPin, LOW);
  digitalWrite(whitePin, LOW);
  digitalWrite(redPin, LOW);
  Serial.println("Abrir");
    
  }
  else if(cont%2 != 0){
    
   digitalWrite(redPin, HIGH);
  delay(50);
  //digitalWrite(buzzerPin, HIGH);
  delay(1500);
  digitalWrite(whitePin, HIGH);
  delay(100);
  //digitalWrite(buzzerPin, LOW);
  digitalWrite(redPin, LOW);
  digitalWrite(whitePin, LOW);
  Serial.println("cerrar");
    
  }

  
}

void Mal_Registro(){
  digitalWrite(redPin, HIGH);
  //digitalWrite(buzzerPin, HIGH);
  delay(100);
  digitalWrite(redPin, LOW);
  //digitalWrite(buzzerPin, LOW);
  delay(100);
  digitalWrite(redPin, HIGH);
  //digitalWrite(buzzerPin, HIGH);
  delay(100);
  digitalWrite(redPin, LOW);
  //digitalWrite(buzzerPin, LOW);
    
}

// Funcion para pasar de byte array a string
void array2string(byte array[], unsigned int len, char buffer[]){
  for (unsigned int i = 0; i<len; i++){

    byte nib1 = (array[i] >> 4) & 0x0F;
    byte nib2 = (array[i] >> 0) & 0x0F;
    buffer[i*2+0] = nib1 < 0xA ? '0' + nib1 : 'A' + nib1 - 0xA;
    buffer[i*2+1] = nib2 < 0xA ? '0' + nib2 : 'A' + nib2 - 0xA;
  }
buffer[len*2] = '\0';
  
}

boolean comparaUID(byte lectura[], byte usuario[]){

  for(byte i=0;i<4;i++){
    if(lectura[i] != usuario[i])
      return(false);
    
    return(true);
  }
}
